<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>SABnzbd+</title>
    <link rel="stylesheet" type="text/css" href="static/stylesheets/smpl.css?smpl$version"/>
    <!--#if $color_scheme#-->
        <link rel="stylesheet" type="text/css" href="static/stylesheets/colorschemes/$color_scheme?smpl$version"/>
    <!--#else#-->
    <link rel="stylesheet" type="text/css" href="static/stylesheets/colorschemes/white.css?smpl$version"/>
    <!--#end if#-->
	<link href="rss?mode=history" rel="alternate" type="application/rss+xml" title="SABnzbd+ History" />
	<link rel="shortcut icon" href="static/images/favicon.ico" />

	<script type="text/javascript" src="static/MochiKit/MochiKit.js"></script>
	<script type="text/javascript" src="static/PlotKit/PlotKit.js"></script>
	<!--[if IE]><script type="text/javascript" src="static/excanvas/excanvas.js"></script><![endif]-->

<!--#set $mbdone = (float($mb) - float($mbleft))#-->
<!--#set $mbdonesrt = float($mbdone) #-->


<!--#set $kbpersec = float($kbpersec)#-->
<!--#set $kbpersecrnd = str(int($kbpersec))#-->
<!--#if $paused #-->
<!--#set $kbpersecrnd = "0"#-->
<!--#end if#-->

	<script type="text/javascript">

	// refresh time in seconds
	RefreshTime = 5;
	var jsontimeout;
	var cookietimeout;
	var speed = $kbpersecrnd;
    var gDual = 0;
    var gUrl;
    
    var gDeferrer;
    var gDeferrerTwo;
    var gRight;
    var gRightBottom;
	</script>


<script type="text/javascript">
    function tvAdd(val){
        var tv = document.getElementById('tvfoldername'); 
        tv.value = tv.value + val;
        previewtv();
    }
    function tvSet(val){
        var tv = document.getElementById('tvfoldername'); 
        tv.value = val;
        previewtv();
    }
    function tvClear(){
        var tv = document.getElementById('tvfoldername'); 
        tv.value = '';
        previewtv();
    }
    function previewtv(){
        var input = document.getElementById('tvfoldername').value;
        var slash = "\\";
        input.toLowerCase()
        input = input.replace(/%ext/g,'avi');
        input = input.replace(/%sn/g,'Show Name');
        input = input.replace(/%s.n/g,'Show.Name');
        input = input.replace(/%s_n/g,'Show_Name');
        input = input.replace(/%0s/g,'01');
        input = input.replace(/%s/g,'1');
        input = input.replace(/%en/g,'Episode Name');
        input = input.replace(/%e\.n/g,'Episode.Name');
        input = input.replace(/%e\_n/g,'Episode_Name');
        input = input.replace(/%0e/g,'05');
        input = input.replace(/%e/g,'5');
		input = input.replace(/%fn/g,'file');
        var com = document.getElementById('complete_dir').value;
        if (com.search("/") > 0)
        {
            slash = "/";
            input = input.replace("\\","/", "g");
        } else {
            input = input.replace("/","\\", "g");
        }
        len = com.length
        if (com.substring(len-1, len) == slash)
        {
            com = com.substring(0, len-1)
        }
        var outbox = document.getElementById('previewtv').innerHTML = com+slash+input;
    }
    
    function movieAdd(val){
        var tv = document.getElementById('moviefoldername'); 
        tv.value = tv.value + val;
        previewmovie();
    }
    function movieSet(val, val2){
        var tv = document.getElementById('moviefoldername'); 
        tv.value = val;
        var tv2 = document.getElementById('movieextra'); 
        tv2.value = val2;
        previewmovie();
    }
    function movieClear(){
        var tv = document.getElementById('moviefoldername'); 
        tv.value = '';
        previewmovie();
    }
    function movieClearExtra(){
        var tv = document.getElementById('movieextra'); 
        tv.value = '';
        previewmovie();
    }
    function movieExtraFolder(value)
    {
       document.getElementById('movie_extra_folder').checked = value;
    }
    function previewmovie()
    {
        var input = document.getElementById('moviefoldername').value;
        var input2 = document.getElementById('movieextra').value;
        extra = input2.replace(/%1/g,'1');
        var slash = "\\";
        ext = extra + '.avi'
        input = input.replace(/.%ext/g,ext);
        input = input.replace(/%ext/g,'avi');
        input = input.replace(/%title/g,'Movie Name');
        input = input.replace(/%.title/g,'Movie.Name');
        input = input.replace(/%_title/g,'Movie_Name');
        input = input.replace(/%y/g,'2000');
        input = input.replace(/%decade/g,'00');
		input = input.replace(/%0decade/g,'2000');
		input = input.replace(/%fn/g,'file');
        
        var regex = /\{([^\{]*)\}/g;
        var str = input;
        var result;
        while ((result = regex.exec(str)) != null)
        {
          var lower = result[0].toLowerCase();
          input = input.replace(result[0],lower);
        }
        input = input.replace(/{/g,'');
        input = input.replace(/}/g,'');
        var com = document.getElementById('complete_dir').value;
        if (com.search("/") > 0)
        {
            slash = "/";
            input = input.replace("\\","/", "g");
        } else {
            input = input.replace("/","\\", "g");
        }
        len = com.length
        if (com.substring(len-1, len) == slash)
        {
            com = com.substring(0, len-1)
        }
        var outbox = document.getElementById('previewmovie').innerHTML = com+slash+input;
    }
    function dateSet(val){
        var tv = document.getElementById('datefoldername'); 
        tv.value = val;
        previewdate();
    }
    function dateClear(){
        var tv = document.getElementById('datefoldername'); 
        tv.value = '';
        previewdate();
    }
    function previewdate(){
        var input = document.getElementById('datefoldername').value;
        var slash = "\\";
        input.toLowerCase()
        input = input.replace(/%ext/g,'avi');
        input = input.replace(/%t/g,'Show Name');
        input = input.replace(/%.t/g,'Show.Name');
        input = input.replace(/%_t/g,'Show_Name');
        input = input.replace(/%decade/g,'00');
		input = input.replace(/%0decade/g,'2000');
		input = input.replace(/%fn/g,'file');
        input = input.replace(/%desc/g,'Episode Name');
        input = input.replace(/%\.desc/g,'Episode.Name');
        input = input.replace(/%\_desc/g,'Episode_Name');
        input = input.replace(/%0d/g,'02');
        input = input.replace(/%d/g,'2');
        input = input.replace(/%0m/g,'01');
        input = input.replace(/%m/g,'1');
        input = input.replace(/%y/g,'2009');
        var com = document.getElementById('complete_dir').value;
        if (com.search("/") > 0)
        {
            slash = "/";
            input = input.replace("\\","/", "g");
        } else {
            input = input.replace("/","\\", "g");
        }
        len = com.length
        if (com.substring(len-1, len) == slash)
        {
            com = com.substring(0, len-1)
        }
        var outbox = document.getElementById('previewdate').innerHTML = com+slash+input;
    }
    function showDiv(id)
    {
        disp = (document.getElementById(id).style.display == "block") ? "none" : "block";
        document.getElementById(id).style.display = disp;
		
    }
    function showRow(id)
    {
        disp = (document.getElementById(id).style.display == "table-row") ? "none" : "table-row";
        document.getElementById(id).style.display = disp;


    }
    
function setCookie(c_name,value,expiredays)
{
var exdate=new Date();
exdate.setDate(exdate.getDate()+expiredays);
document.cookie=c_name+ "=" +value+
((expiredays==null) ? "" : ";expires="+exdate.toGMTString());
}

function getCookie(c_name)
{
if (document.cookie.length>0)
  {
  c_start=document.cookie.indexOf(c_name + "=");
  if (c_start!=-1)
    {
    c_start=c_start + c_name.length+1;
    c_end=document.cookie.indexOf(";",c_start);
    if (c_end==-1) c_end=document.cookie.length;
    return unescape(document.cookie.substring(c_start,c_end));
    }
  }
return "";
}

function checkCookie()
{
var speedlog = [];
cook=getCookie('speedlog2');

if (cook!=null && cook!="")
  {

	var speedlog = cook.split(',');
	for(i=1; i<20; i++) {
	   speedlog[i-1] = speedlog[i];
	}

	speedlog[19] = speed;

	var speedstr = speedlog.join(',');
	setCookie('speedlog2',speedstr,1);

	//drawGraph(speedlog);
	chartReload(speedlog);
  }
  else
  {
  setCookie('speedlog2','0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$kbpersecrnd',1);
    }
if (RefreshTime>0) {
	clearTimeout ( cookietimeout );
	cookietimeout = setTimeout("checkCookie();", RefreshTime*1000)
}
}
function toggleHistoryDetails(nzoID, row_obj, tog_id)
{

    cook=getCookie('history_verbosity');

    if (cook!=null && cook!="")
    {
        var histitems = cook.split(',');
        found = -1;
        for(i=0; i<histitems.length; i++) 
        {
            if (histitems[i] == nzoID) found = i;
        }
        if (found >= 0){
            histitems.splice(found,1);
            plus = "+";
        } else {
            histitems.push(nzoID)
            plus = "-";
        }
        var histstr = histitems.join(',');
    } else {
        var histstr = nzoID;
        plus = "-"
    }
    setCookie('history_verbosity',histstr,100);
    element = document.getElementById(tog_id);
    element.innerHTML = plus
    showRow(row_obj)
}



function checkrefresh()
{
	refr=getCookie('smplrefresh');
	element = document.getElementById('refreshrate');
	if (refr!=null && refr!="")
	{

		var refreshtimelist = [2, 3, 5, 10, 15, 30, 60, 180, 300, 0];
		index = Number(refr);
		var result = -1;
		for(i=0; i<10; i++)
		{
			if (refreshtimelist[i]==index) result = i;
		}
		if (result<0)result=1;
		element.selectedIndex = result;

		RefreshTime = Number(refr);
		//alert(refreshr);
	}
	else
	{

		refreshr = element.options[element.selectedIndex].value;
		//alert(refreshr);
        if (refreshr)
        {
            setCookie('smplrefresh',refreshr,360);
        }
	}
}


function applyrefresh(value)
{
RefreshTime = value;
setCookie('smplrefresh',value,360);
loadingJSON();
checkCookie();
}

MochiKit.DOM.addLoadEvent(onpageload);

function onpageload() {
loadtitle();
initDynamicTable();
loadingJSON();
checkCookie();

//doit();

checkrefresh();
}

function loadtitle() {
    url = document.URL
    if (url.match('#'))
    {
        index = url.lastIndexOf('#');
        url = url.slice(index+1, url.length);
        url = url.replace('-', '/');
		if (url.indexOf('/') == 0){
			url = url.slice(1, url.length);
		}
		if (url.lastIndexOf('/') == url.length-1){
			url = url.slice(0, url.length-1);
		}
		
        switch(url)
        {
            case 'dv1':
                lr('queue/','', 1, 1);
                lrb('history/','limit=50',1);
                break;    
            case 'dv2':
                lr('queue/','', 1, 2);
                lrb('history/','limit=50',1);
                break;
            case 'history':
                lr('history/','limit=50',1);
                break;
            case 'queue':
            case 'connections':
                lr(url,'',1)
            default:
                lr(url)
        }
    } else {
        lr('queue/','limit=5', 1, 1);
        lrb('history/','limit=5',1);
    }

}

</script>


<!--#set $statusstr2 = "Pause"#-->
<!--#set $pau = "0"#-->
<!--#if $paused #-->
<!--#set $pau = "1"#-->
<!--#set $status = "<span class='paused'>Paused</span>"#-->
<!--#set $statusstr2 = "Resume"#-->
<!--#else if float($kbpersecrnd)>0 #-->
<!--#set $status = "<span class='downloading'>Downloading</span>"#-->
<!--#else if float($kbpersecrnd) == 0 #-->
<!--#set $status = "<span class='idle'>Idle</span>"#-->
<!--#end if#-->

<script type="text/javascript">
	var status2 = $pau;
	var timerId2 = 0;
    var timerId3 = 0;
    
    
    function clearForm(obj, defText){
        text = obj.value;
        if (text == defText){
            obj.value = "";
        }
    }
    
    function setForm(obj, defText){
        text = obj.value;
        if (text == ""){
            obj.value = defText;
        }
    }
    
	function toggle_paused()
	{
    //Pause button toggle - XML request and instant word changing for the link and status
		if (status2 == 1)
		{
			status2 = 0;
			document.getElementById("status").innerHTML = "<span class='idle'>Idle</span>";
			document.getElementById("status2").innerHTML = "Pause";
			doSimpleXMLHttpRequest("tapi?mode=resume");
		}
		else
		{
			status2 = 1;
			document.getElementById("status").innerHTML = "<span class='paused'>Paused</span>";
			document.getElementById("speed").innerHTML = "0";
			document.getElementById("status2").innerHTML = "Resume";
			doSimpleXMLHttpRequest("tapi?mode=pause");

		}
	}

	function deletequeueitem(elem)
	{
    //deletes an item from the queue - passed variable is the id (uid) of the queue item to delete(and also the id of the queue element)
        el = document.getElementById(elem)
        el.parentNode.removeChild(el);

		d = doSimpleXMLHttpRequest('tapi/', {mode: 'queue', name: 'delete', value: elem, _dc: Math.random()});

	}
    
	function deletenzf(nzo,elem)
	{
    //deletes an item from the queue - passed variable is the id (uid) of the queue item to delete(and also the id of the queue element)
        el = document.getElementById(elem)
        el.parentNode.removeChild(el);

		d = doSimpleXMLHttpRequest('tapi/', {mode: 'queue', name: 'delete_nzf', value: nzo, value2: elem, _dc: Math.random()});

	}
    
	function pausequeueitem(elem)
	{
    //deletes an item from the queue - passed variable is the id (uid) of the queue item to delete(and also the id of the queue element)
        val1 = document.getElementById(elem).innerHTML;
        val1="";

		d = doSimpleXMLHttpRequest('queue/pause_nzo', {uid: elem, _dc: Math.random()});
		d.addCallback(replaceright);
		d.addErrback(handleServerError);
	}
    
	function resumequeueitem(elem)
	{
    //deletes an item from the queue - passed variable is the id (uid) of the queue item to delete(and also the id of the queue element)
        val1 = document.getElementById(elem).innerHTML;
        val1="";

		d = doSimpleXMLHttpRequest('queue/resume_nzo', {uid: elem, _dc: Math.random()});
		d.addCallback(replaceright);
		d.addErrback(handleServerError);
	}
    
	function deletehistoryitem(elem, pnode)
	{
    //deletes an item from the history - passed variable is the id (uid) of the history item to delete(and also the id of the history element)
        el = document.getElementById(elem)
        el.parentNode.removeChild(el);
    
		d = doSimpleXMLHttpRequest('tapi/', {mode: 'history', name: 'delete', value: elem, _dc: Math.random()});
	}
    
    function handleServerError(){}
    
    function killTimer(){
        clearTimeout (timerId2);
    }
    function restartTimer(time){
        killTimer();
        timerId2 = setTimeout("startTimer()", time*1000);
    }
    
    function startTimer(url, extra, dual){
        killTimer();
        if (url) gUrl = url
        else url = gUrl
        if (dual) gDual = dual
        else dual = gDual
        timer="lr(\'"+url+"\', \'"+extra+"\', 1, "+dual+", 'Right')";
        timerId2 = setTimeout(timer, RefreshTime*1000);
 
    }
    
    function rssUrlEncode(url, uri ,cat ){
        var enc_uri = urlEncode(uri)
        location = url+"?uri="+enc_uri+"&cat="+cat+"&this_uri="+enc_uri
    }
    
	
	function lr(url, extra, refresh, dual, pnode)
	{
    //submits an ajax request and loads the retrieved data into the div called "Right". Can queue itself up to repeat the action based on the refresh rate
		if (dual!=-1)
        {
            gDual = dual;
            if (dual!=2 ) {
                document.getElementById('Container').style.width = "90%";
                document.getElementById('Right').style.width = "100%";
                document.getElementById('Right_bottom').style.width = "100%";
            }
            else {
                document.getElementById('Container').style.width = "99%";
                document.getElementById('Right').style.width = "48%";
                document.getElementById('Right_bottom').style.width = "48%";
            }
            if (!dual){
                stopDeferer(gDeferrerTwo);
                stopDeferer(gRightBottom);
                document.getElementById('Right_bottom').innerHTML = "";
            }
        }
        if (pnode != 'Right_bottom') {
            lra(url, extra, refresh, dual, pnode)
        } else {
            lrb(url, extra, refresh)
        }

	}
    function lra(url, extra, refresh, dual, pnode){
        append = '?_dc='+Math.random();
        if (extra){
            append = append+'&'+extra;
        }
		if (refresh!=-1)
		{
            //cancel any running timers for inprogress ajax calls or timed lr()  calls
            stopDeferer(gDeferrer);
            stopDeferer(gRight);
		}
        
        if (refresh > 0 && RefreshTime > 0) {
            gRight = callLater(RefreshTime, lr, url, extra, refresh, dual, pnode);
        } 
        
		var gDeferrer = doSimpleXMLHttpRequest(url+append); 

	    gDeferrer.addCallback(function (res)
	    {
            document.getElementById('Right').innerHTML = res.responseText;
	    });
		gDeferrer.addErrback(handleServerError);
    }
	function lrb(url, extra, refresh)
	{
		//similar to lra() but loads the response in the right_bottom container
        append = '?_dc='+Math.random();
        if (extra){
            append = append+'&'+extra;
        }
		if (refresh!=-1)
		{
			stopDeferer(gDeferrerTwo);
			stopDeferer(gRightBottom);
		}
        
		gDeferrerTwo = doSimpleXMLHttpRequest(url+append);
	    gDeferrerTwo.addCallback(function (res) {
            document.getElementById('Right_bottom').innerHTML = res.responseText;
        });
        
        if (refresh && refresh!=-1 && RefreshTime > 0) {
            gRightBottom = callLater(RefreshTime, lrb, url, extra, refresh);
        } 

		//res.addErrback(handleServerError);
	}

    function stopDeferer(deferer){
        if (deferer){
            deferer.cancel();
        }
	}
    
    function pauseHistoryDeferer(pnode){
	      if (pnode != 'Right_bottom') {
            stopDeferer(gRight);
            stopDeferer(gDeferrer);
          } else {
            stopDeferer(gRightBottom);
            stopDeferer(gDeferrerTwo);
          }
    }
	
    function pauseQueueDeferer(pnode){
	      if (pnode != 'Right_bottom') {
            stopDeferer(gRight);
            stopDeferer(gDeferrer);
          } else {
            stopDeferer(gRightBottom);
            stopDeferer(gDeferrerTwo);
          }
    }
    
    function loadSearch(url, elem, extra, refresh, pnode, new_search){
        if (elem){
            var searchTerm = document.getElementById(elem).value;
        } else {
            var searchTerm = "";
        }
        if (extra && searchTerm){
            if (new_search) extra = extra.replace(/start=\d+/g, "start=0");
            extra += '&';
        }
        if (searchTerm){
            extra = extra+'search='+searchTerm;
        }
        lr(url, extra, refresh,-1,pnode);

    }
    
	function lrdual(url1, url2, refresh, pnode)
	{
    killTimer()
    //used when something needs to be submitted in the background, and another page loaded (usually refreshing the current page)
        var d = doSimpleXMLHttpRequest(url1);
		d.addCallback(function (d)
        {
        if (pnode == 'Right') lr(url2, '', refresh, gDual);//if link is in right_bottom needs to be lrb(
        else lrb(url2, '', refresh, gDual)
        });

	}

	function changequeuedetails(page, extra)
	{
        append = '&_dc='+Math.random();
		if (extra) {
			append += '&'+extra
		}
        url = page+append;
		d = doSimpleXMLHttpRequest(url);
		d.addCallback(replaceright);
		d.addErrback(handleServerError);
	}
    


	function testemail()
	{
		d = doSimpleXMLHttpRequest('connections/testmail');
		d.addCallback(function (d)
        {
        alert("E-Mail Sent");
        });
		d.addErrback(handleServerError);
	}

	function getBookmarks()
	{
		d = doSimpleXMLHttpRequest('api?mode=newzbin&name=get_bookmarks');
	}

	function changequeueoptions(page)
	{
		d = doSimpleXMLHttpRequest('queue/'+page);
	}

	function reloadqueue()
	{
		var res = doXHR('queue',
	    {
		    method:'POST',
            sendContent:'?asshole='+Math.random()

	    });
		res.addCallback(replaceright);
		res.addErrback(handleServerError);
	}
	//based from Mochikit documentation - finds all the form values for an element and returns formatted query string
	function getFormValues(element)
	{

	    kv = MochiKit.DOM.formContents(element);
	    names = kv[0];
	    values = kv[1];

		kvstr = queryString(kv)
	    return kvstr;
	}

    function toggle_verbosity(nzo_id, extra)
    {
        append = '&_dc='+Math.random();
		if (extra) {
			append += '&'+extra
		}
        url = 'queue/tog_uid_verbose?uid='+nzo_id+append;
		var res = doSimpleXMLHttpRequest(url);        
	    res.addCallback(function (res)
	    {
          document.getElementById('Right').innerHTML = res.responseText;
        })
    }


	//a function for submitting forms, grabs all the form info the the form defined by saveelement. Can also execute an additional page get after the post
	function submitconfig(extra, saveelement, element, url2, refresh)
	{
        append = '?_dc='+Math.random();
		var values = [];
		var elementt;
		if (element) elementt = document.getElementById(element);
		values = getFormValues(elementt);

		var url = ''+extra;
		var d = doXHR(url+append,
	    {
		    method:'POST',
		    sendContent:values,
		    headers: {"Content-Type":"application/x-www-form-urlencoded"}

	    });
		if (saveelement) {
			saveelement.value = "Saving.."
			saveelement.disabled = true
		}
	    d.addCallback(function (result)
	    {
		  if (saveelement) {
			  saveelement.value = "Saved"
			  saveelement.disabled = false
		  }
          if(url2 == "1") {replaceright(result);}
          else if(url2 == "2") {replaceright2(result);}
		  else if(url2) {lr(url2,'',refresh);}
	    });

	    d.addErrback( function (result)
	    {
		  if (saveelement) {
			  saveelement.value = "Failed!"
			  saveelement.disabled = false
		  }
	    });

	}



	var replaceright  = function (res)
	{
		document.getElementById('Right').innerHTML = res.responseText;
	}
    
	var replaceright2  = function (res)
	{
		document.getElementById('Right_bottom').innerHTML = res.responseText;
	}


function mark_all()
{
    var s;
    var i=0;
    while(s = document.getElementsByTagName("input")[i++])
    {
        if(s.type=='checkbox')
        {
            s.checked=true;
        }
    }
}


function submit_marked(nzo_id, action_key)
{
	extra = 'action_key='+action_key
    var s;
    var i=0;
    while(s = document.getElementsByTagName("input")[i++])
    {
        if(s.type=='checkbox' && s.checked == true)
        {
            extra = extra + '&' + s.name + '=on'
        }
    }
	//submitconfig(extra, '', '', 1)
	url = 'nzb/'+nzo_id+'/bulk_operation'
	lr(url, extra)
}

function unmark_all()
{
    var s;
    var i=0;
    while(s = document.getElementsByTagName("input")[i++])
    {
        if(s.type=='checkbox')
        {
            s.checked=false;
        }
    }
}

function invert()
{
    var s;
    var i=0;
    while(s = document.getElementsByTagName("input")[i++])
    {
        if(s.type=='checkbox')
        {
            s.checked=!s.checked;
        }
    }
}

//loads up the json for the queue page and changes the values in the document
function loadingJSON(){
	if (RefreshTime>0) {
	clearTimeout ( jsontimeout );
	jsontimeout = setTimeout("loadingJSON();", RefreshTime*1000);
	}
	var url = "tapi?mode=qstatus&output=json&_dc="+Math.random();
	var d = loadJSONDoc(url);
	var gotMetadata = function (info)
	{
		//alert(info["kbpersec"]);

		speed = info["kbpersec"].toFixed(0);
		var paused = info["paused"];
		if (paused==true) speed = 0;

		if (paused == true)
		{
			document.getElementById("status").innerHTML = "<span class='paused'>Paused</span>";
            document.title = "SABnzbd+ | Paused";
            document.getElementById("status2").innerHTML = "Resume";
            status2 = 1
						//alert("paused");
		} else if 	(speed>0)
		{
			document.getElementById("status").innerHTML = "<span class='downloading'>Downloading</span>";
    		totalTimeRemain = info["timeleft"];   
            dltitle = "SABnzbd+ | "+totalTimeRemain+" | "+speed+"kB/s";
            document.title = dltitle;
            document.getElementById("status2").innerHTML = "Pause";
            status2 = 0
						//alert("down");
		} else {
			document.getElementById("status").innerHTML = "<span class='idle'>Idle</span>";
            document.title = "SABnzbd+ | Idle";
            document.getElementById("status2").innerHTML = "Pause";
            status2 = 0
						//alert("idle");
		}

		document.getElementById("speed").innerHTML = speed;
		document.getElementById("mbleft").innerHTML = info["mbleft"].toFixed(2);
		document.getElementById("mbtotal").innerHTML = info["mb"].toFixed(2);
        document.getElementById("ds1").innerHTML = info["diskspace1"].toFixed(2);
		document.getElementById("ds2").innerHTML = info["diskspace2"].toFixed(2);
        //var perc1 = 1 - (info["jobs"][0]["mbleft"].toFixed(2) / info["jobs"][0]["mb"].toFixed(2))
        //alert(info["jobs"][0]);
	   	if (info["jobs"]!="") document.getElementById("downloadinfo").innerHTML = "Downloading: "+info["jobs"][0]["filename"];
        else document.getElementById("downloadinfo").innerHTML = "";
		document.getElementById("have_warnings").innerHTML = info["have_warnings"];
		

	};
	var metadataFetchFailed = function (err) {
	  //alert("The metadata for MochiKit.Async could not be fetched :(");
	};
	d.addCallbacks(gotMetadata, metadataFetchFailed);
}




//based on plotkit docummentation for dynamic tables
   //var dataTable = null;
   var layout = null;
   var renderer = null;
   var options = null;

   function initDynamicTable() {
       //dataTable = data;
       <!--#if $color_scheme  == 'black.css'#-->
       options = PlotKit.Base.officeBlack();
       <!--#else #-->
       options = PlotKit.Base.officeBlue();
       <!--#end if #-->
       layout = new Layout("line", options);
       renderer = new SweetCanvasRenderer('graph', layout, options);
	   //alert("hi");
   }

   function chartReload(data) {

        
       <!--#if $color_scheme  == 'black.css'#-->
       var colorScheme = "Black";
       <!--#else #-->
       var colorScheme = "Blue";
       <!--#end if #-->
        // setup layout options
        var themeName = "office" + colorScheme;
        var theme = PlotKit.Base[themeName]();
        MochiKit.Base.update(options, theme);

        layout.style = "line";
        MochiKit.Base.update(layout.options, options);
        MochiKit.Base.update(renderer.options, options);

        //layout.addDataset("data", values);
		layout.addDataset("sqrt", [[0, data[0]], [1, data[1]], [2, data[2]], [3, data[3]], [4, data[4]], [5, data[5]], [6, data[6]], [7, data[7]], [8, data[8]],[9, data[9]],[10, data[10]], [11, data[11]], [12, data[12]], [13, data[13]], [14, data[14]], [15, data[15]], [16, data[16]], [17, data[17]], [18, data[18]],[19, data[19]]]);

        // update
        layout.evaluate();
        renderer.clear();
        renderer.render();

   }


</script>


</head>
<body>
	<div id="Container">
		<div id="Header">
			<p class="status">
				Status: <span id="status">$status</span><br />
				Speed: <span id="speed">$kbpersecrnd</span> kB/s<br />
				Queue: <span id="mbleft">$mbleft</span>/<span id="mbtotal">$mb</span>
			</p>
		<div id="logo">
			<a href=""><img id="title" src="static/sabnzbd_small4.png" alt="sabnzbd+" /></a>
			<h2>The automatic usenet download tool</h2>
		</div>
            <!-- <div id="divchart"><canvas id="graph" height="70" width="700"></canvas></div> -->
			<br />
<div class="centerLinks header-margin light-grey"><a onclick="javascript:toggle('addNew','',{duration:0.2})">[Toggle Add NZB]</a></div>
		</div>
		<div id="Content">
			<div id="Left">
				<ul id="menu">
					<li><a class="current" href="./">Home</a></li>
					<li><a href="#/queue/" onClick="lr('queue/', '', 1, 0);">Queue</a></li>
					<li><a href="#/history/" onClick="lr('history/','limit=50', 1, 0);">History</a></li>
                    <li><a href="#/dv1/" onClick="lr('queue/','', 1, 1);lrb('history/','limit=50',1);">DualView1</a></li>
                    <li><a href="#/dv2/" onClick="lr('queue/','', 1, 2);lrb('history/','limit=50',1);">DualView2</a></li>
					<li><a href="#/config/" onClick="lr('config/','', 0, 0);">Config</a></li>
					<ul class="secondul">
						<li><a class="config" href="#/config/general/" onClick="lr('config/general/','', 0, 0);">General</a></li>
						<li><a class="config" href="#/config/directories/" onClick="lr('config/directories/','', 0, 0);">Folders</a> </li>
						<li><a class="config" href="#/config/switches/" onClick="lr('config/switches/','', 0, 0);">Switches</a> </li>
						<li><a class="config" href="#/config/server" onClick="lr('config/server/','', 0, 0);">Servers</a> </li>
						<li><a class="config" href="#/config/scheduling/" onClick="lr('config/scheduling/','', 0, 0);">Scheduling</a> </li>
						<li><a class="config" href="#/config/rss/" onClick="lr('config/rss/','', 0, 0);">RSS</a> </li>
						<li><a class="config" href="#/config/email/" onClick="lr('config/email/','', 0, 0);">Email</a></li>
						<li><a class="config" href="#/config/newzbin/" onClick="lr('config/newzbin/', '', 0, 0);">Index sites</a></li>
                        <li><a class="config" href="#/config/categories/" onClick="lr('config/categories/', '', 0, 0);">Categories</a></li>
                        <li><a class="config" href="#/config/sorting/" onClick="lr('config/sorting/', '', 0, 0);">Sorting</a></li>
					</ul>
					<li><a href="#/connections/" onClick="lr('connections/','', 1, 0);">Connections</a></li>
    				<li><a href="#/connections/" onClick="lr('connections/','', 1, 0);">Warnings(<span id="have_warnings">$have_warnings</span>)</a></li>
					<br />
					<li><a class="bold" id="status2" onClick="toggle_paused()">$statusstr2</a></li>
					<!--#if $varExists('newzbinDetails')#-->
					<li><a onClick="getBookmarks()">GetBookmarks</a></li>
					<!--#end if#-->
					<br />
					<li><a style="text-decoration:underline;cursor:pointer;" onClick="if(confirm('Are you sure you want to restart SABnzbd?')){window.location='config/restart';}">Restart</a></li>
					<li><a style="text-decoration:underline;cursor:pointer;" onClick="if(confirm('Are you sure you want to shut down the SABnzbd application?')){window.location='shutdown';}">Shutdown</a></li>
                    <br/>
        			<li><a href="$helpuri" target="_blank">Wiki</a></li>
        			<li><a href="http://forums.sabnzbd.org" target="_blank">Forums</a></li>
                    <li><a href="http://sabnzbd.org/live-chat/" target="_blank">IRC</a></li>
				</ul>
				<!--<input type="checkbox" name="enable_speedlimit" />-->
				<span class="small">Speedlimit: </span><input type="text" id="speedbox" value="$speedlimit" onChange="javascript:doSimpleXMLHttpRequest('tapi?mode=config&name=set_speedlimit&value='+this.value);">
				<br /><br /><center>
				Incomplete<br />
				<span class="small"><span id="ds1">${diskspace1}</span>GB / ${diskspacetotal1}GB</span><br />
				Complete<br />
				<span class="small"><span id="ds2">${diskspace2}</span>GB / ${diskspacetotal2}GB</span>
                <!--#if $loadavg#-->
                    SysLoad<br />
                    <span class="small"><span id="ds3">${loadavg}</span></span>
                <!--#end if#-->
				</center>
				
			</div>
			<div id="RightContainer">
<div id="addNew" class="centerLinks" style="overflow: hidden; display: none;">
    <form action="addID" method="get">
        <input type="text" style="width:218px;" name="id" value="Enter URL<!--#if $varExists('newzbinDetails') then ' or Report ID' else '' #-->" onfocus="clearForm(this, 'Enter URL<!--#if $varExists('newzbinDetails') then " or Report ID" else "" #-->')" onblur="setForm(this, 'Enter URL<!--#if $varExists('newzbinDetails') then " or Report ID" else "" #-->')">
        <!--#if $cat_list#-->
            <select name="cat" >
                <optgroup label="Category">
                    <!--#for $ct in $cat_list#-->
                        <option value="$ct">$ct</option>
                    <!--#end for#-->
                </optgroup>
            </select>
        <!--#end if#-->
        <select name="pp">
            <optgroup label="PP">
                <option value="-1" <!--#if $cat_list then "selected" else ""#-->>Default</option>
                <option value="0">None</option>
                <option value="1">+Repair</option>
                <option value="2">+Unpack</option>
                <option value="3" <!--#if $cat_list then "" else "selected"#-->>+Delete</option>
            </optgroup>
        </select>
        <!--#if $script_list#-->
            <select name="script">
                <optgroup label="Script">
                    <!--#for $sc in $script_list#-->
                        <option value="$sc">$sc</option>
                    <!--#end for#-->
                </optgroup>
            </select>
        <!--#end if#-->
        <select name="priority">
            <optgroup label="Priority">
                <option value="1">High</option>
                <option value="0" selected>Normal</option>
                <option value="-1">Low</option>
            </optgroup>
        </select>
        <input type="submit" class="submitindent2"  value="Add">
    </form>
    <form action="addFile" method="post" enctype="multipart/form-data">
        <input type="file" style="width:221px" name="nzbfile">
        <!--#if $cat_list#-->
            <select name="cat">
                <optgroup label="Category">
                    <!--#for $ct in $cat_list#-->
                        <option value="$ct">$ct</option>
                    <!--#end for#-->
                </optgroup>
            </select>
        <!--#end if#-->
        <select name="pp">
            <optgroup label="PP">
                <option value="-1" <!--#if $cat_list then "selected" else ""#-->>Default</option>
                <option value="0">None</option>
                <option value="1">+Repair</option>
                <option value="2">+Unpack</option>
                <option value="3" <!--#if $cat_list then "" else "selected"#-->>+Delete</option>
            </optgroup>
        </select>
        <!--#if $script_list#-->
            <select name="script">
                <optgroup label="Script">
                    <!--#for $sc in $script_list#-->
                        <option value="$sc">$sc</option>
                    <!--#end for#-->
                </optgroup>
            </select>
        <!--#end if#-->
        <select name="priority">
            <optgroup label="Priority">
                <option value="1">High</option>
                <option value="0" selected>Normal</option>
                <option value="-1">Low</option>
            </optgroup>
        </select>
        <input type="submit" class="submitindent2"  value="Add">
    </form>
</div>
                <div id="Right"></div>
                <div id="Right_bottom"></div>
    		</div>
		</div>
		<div id="Footer">
			<div id="divchart"><canvas id="graph" height="100" width="700"></canvas></div>
			<span id="downloadinfo"></span><br /><br />
			<p id="versions">Refresh Rate: <select id="refreshrate" onchange="javascript:applyrefresh(this.options[this.selectedIndex].value)">
				<option value="2" >2 seconds</option>
				<option value="3" >3 seconds</option>
				<option value="5" selected="selected">5 seconds</option>
				<option value="10" >10 seconds</option>
				<option value="15" >15 seconds</option>
				<option value="30" >30 seconds</option>
				<option value="60" >1 minute</option>
				<option value="180" >3 minutes</option>
				<option value="300" >5 minutes</option>
				<option value="0" >None</option>
			</select>
            <br />sabnzbd version: $version | smpl version: 1.3</a></p>
    				<!--#if $warning#-->
    				<h2>WARNING</h2>
    				<b>$warning</b><br />
    				<!--#end if#-->
    				<!--#if $new_release#-->
    			    <b>New release $new_release available at <a href="$new_rel_url" target="_blank">SF.net</a></b><br/>
    				<!--#end if#-->
		</div>
	</div>
</body>
</html>
